//Common file for including useful commands shared by all the shaders

//Common uniform variables
uniform sampler2D colorMap;
uniform sampler2D parallaxHeightMap;
uniform sampler2D parallaxNormalMap;
uniform int wireframe;

//Common input variables
in vec3 vert_Normal;
in vec3 vert_View;
in vec3 vert_LightDir;
in vec2 vert_Texcoords;

//Common output variables
out vec4 frag_Color;

//Global mutable variables
vec4 light_Ambient = vec4(0.19225, 0.19225, 0.19225, 1.0);
vec4 light_Diffuse = vec4(0.50754, 0.50754, 0.50754, 1.0);
vec4 light_Specular = vec4(0.508273, 0.508273, 0.508273, 1.0);

vec4 materialColor = vec4(1.0, 1.0, 1.0, 1.0);

float parallaxScale = 0.05;
float parallaxBias = -0.022;
int parallaxItrNum = 4;

//Check to see if light will strike the vertex
bool CanDoLighting(vec2 texcoords, vec3 normal, vec3 light)
{
	//If in wireframe more set the colour to grey and exit shaders
	if (wireframe == 1)
	{
		frag_Color = vec4(0.75, 0.75, 0.75, 1.0);
		return (false);
	}

	if (dot(normal, light) < 0.0)
	{
		frag_Color = light_Ambient * texture2D(colorMap, texcoords);
		return (false);
	}
	else
		return (true);
}

//Calculate the phong lighting for a single light
vec4 CommonFragmentProcessing(vec2 texcoords, vec3 normal, vec3 view, vec3 lightDir)
{
	//Initial variables and settings
	vec4 colorTex = texture2D(colorMap, texcoords);
	vec4 ambient = light_Ambient;
	vec4 diffuse = light_Diffuse;
	vec4 specular = light_Specular;

	//Calculate the reflec vector
	vec3 reflec = normalize(-reflect(lightDir, normal));

	//Calculate the diffuse intensity
	float diffuseIntensity = max(0.0, dot(normal, lightDir));

	//Calculate the specular intensity
	float specularIntensity = pow(max(0.0, dot(reflec, view)), 96.0);

	//Factor in the intensities to the diffuse and specular amounts
	diffuse *= diffuseIntensity;
	specular *= specularIntensity;

	//Return the final color
	return ((ambient + diffuse + specular) * colorTex);
}
