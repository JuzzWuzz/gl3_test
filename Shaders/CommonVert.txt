//Common file for the vertex shaders
//Include header state and common vertex processing function

//Common uniform variables
uniform mat4 world;
uniform vec3 worldTrans;
uniform mat4 view;
uniform mat4 projection;
uniform mat3 normalMatrix;
uniform float texScale;
uniform vec3 light_Pos;
uniform vec3 camera_Pos;
uniform int useCameraLight;

//Common input variables
in vec3 in_Position;
in vec2 in_Texcoords;
in vec3 in_Normal;

//Common output variables
out vec3 vert_Normal;
out vec3 vert_View;
out vec3 vert_LightDir;
out vec2 vert_Texcoords;

//Mutable variables
vec4 heightOffset = vec4(0.0, 0.0, 0.0, 0.0);

//Perform the basic vertex shading functions
void CommonVertexProcessing()
{
	//Perform model view projection matrix calculation
	mat4 mv = view * world;
	mat4 mvp = projection * mv;

	//Output the final position of the vertex
	vec4 pos = vec4(in_Position, 1.0);
	pos += heightOffset;
	gl_Position = mvp * pos;

	//Store the vertex normal
	vert_Normal = normalMatrix * in_Normal;

	//Choice between camera light or world light
	if (useCameraLight == 1)
	{
		//Calculate the vertex view and light in eye space
		pos = mv * pos;
		vert_View = -(pos.xyz / pos.w);
		vert_LightDir = vec3(view * vec4(camera_Pos - worldTrans, 0.0));
	}
	else
	{
		//Calculate the vertex pos, light and normal in world space
		pos = world * pos;
		vert_View = camera_Pos - (pos.xyz / pos.w);
		vert_LightDir = light_Pos;
	}

	//Set the texture coordinates
	vert_Texcoords = in_Texcoords * texScale;
}
